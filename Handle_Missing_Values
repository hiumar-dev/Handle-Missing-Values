{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPdv+RI0h5qbrdcM81bJ3Qb",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/hiumar-dev/Handle-Missing-Values/blob/main/Handle_Missing_Values\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Handle Missing Values in Dataset\n",
        "# Author: [Muhammad Umar]\n",
        "# Date: [Date]"
      ],
      "metadata": {
        "id": "M2NqLdPM9Yz2"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Section # 1: Data Visualization"
      ],
      "metadata": {
        "id": "rS08KgtY_u4m"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**HISTROGRAM PLOT OF AGE   (DISTRIBUTION CHECK)**\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "AioSGhqYa4Xu"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QeyxJ9KFsZM4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "outputId": "35806756-a5f9-441f-cb0e-8305a1e24117"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# import Libraries\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import pandas as pd\n",
        "\n",
        "# Dummy data set\n",
        "ages = [15, 18, 20, 22, 23, 25, 25, 26, 27, 28, 29, 30, 30, 31, 32, 35, 36, 38,\n",
        "        40, 42, 45, 50, 52, 55, 60, 65, 70, 72, 75, 80 ]\n",
        "\n",
        "df=pd.DataFrame({\"age\": ages})\n",
        "\n",
        "# Histrogram with KDE\n",
        "\n",
        "sns.histplot(df[\"age\"], kde=True , bins=10)\n",
        "plt.title(\"Histrogram of Age\")\n",
        "plt.xlabel(\"Age\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "plt.show()\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**BOX PLOT OF AGE (OUTLIERS DETECTION)**"
      ],
      "metadata": {
        "id": "pv6NvEI-Aeyz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# import libraries\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "\n",
        "# Dummy data set\n",
        "ages = [15, 18, 20, 22, 23, 25, 25, 26, 27, 28, 29, 30, 30, 31, 32, 35, 36, 38,\n",
        "        40, 42, 45, 50, 52, 55, 60, 65, 70, 72, 75, 80 ]\n",
        "\n",
        "df=pd.DataFrame({\"age\": ages})\n",
        "# boxplot\n",
        "\n",
        "sns.boxplot(df[\"age\"])\n",
        "plt.title(\"Boxplot of Age\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 433
        },
        "id": "FXVwrAwdA3J9",
        "outputId": "51eccad3-f7a9-4d53-bbe2-36d550c85f1a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**SCATTER PLOT OF AGE AND FARE (OUTLIERS DETECTION)**"
      ],
      "metadata": {
        "id": "GjDtKd7jEYDf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# import libraries\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# dammy data set\n",
        "ages = [22, 25, 30, 35, 40, 28, 26, 32, 34, 29, 45, 50, 18, 60, 15]\n",
        "fares =[7.25, 71.83, 8.05, 53.10, 30.00, 13.00, 7.90, 26.00, 27.72, 10.50,\n",
        "             83.47, 25.93, 9.35, 120.00, 3.17]\n",
        "\n",
        "df = pd.DataFrame({\n",
        "    \"Age\": ages,\n",
        "    \"Fare\": fares\n",
        "})\n",
        "\n",
        "# scatter plot with KDE\n",
        "plt.scatter(df['Age'], df['Fare'])\n",
        "plt.title(\"Scatter Plot: Age vs Fare\")\n",
        "plt.xlabel(\"Age\")\n",
        "plt.ylabel(\"Fare\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "EVmYx6uwEx_U",
        "outputId": "9616ce3f-4ec4-44a0-93ae-abc994b26896"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**HEAT-MAP OF AGE,FARE,INCOME**"
      ],
      "metadata": {
        "id": "1U1ISVdvI2z-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# import libraries\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Dummy dataset\n",
        "data = {\n",
        "    \"Age\": [15, 18, 20, 22, 23, 25, 26, 28, 30, 35, 40, 45, 50, 55, 60],\n",
        "    \"Fare\": [5, 7, 10, 15, 20, 25, 30, 35, 40, 50, 60, 75, 90, 110, 130],\n",
        "    \"Income\": [100, 200, 250, 300, 350, 400, 450, 470, 500, 600, 700, 800, 900, 1000, 1200]\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# Correlation matrix\n",
        "corr = df.corr()\n",
        "\n",
        "# Heatmap\n",
        "plt.figure(figsize=(6,4))\n",
        "sns.heatmap(corr, annot=True, cmap=\"coolwarm\", fmt=\".2f\")\n",
        "plt.title(\"Correlation Heatmap\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 391
        },
        "id": "ca_MNAv-IoAX",
        "outputId": "67aeb758-d7c4-4bdc-b5b3-ad0e04248f5b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "***"
      ],
      "metadata": {
        "id": "l25ptoExACsq"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## SECTION # 2: Handling Missing Values (Mean, Median, Mode)"
      ],
      "metadata": {
        "id": "DBjPQ9jUJMF5"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**NOW WE HANDLE MISSING VALUES WITH (MEAN)**"
      ],
      "metadata": {
        "id": "kM65J-PhaoDr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "\n",
        "# dummy Data set:\n",
        "\n",
        "data=pd.DataFrame({\"age\" : [10,12,14,13,15,14,19,18,20,25,28,np.nan,29,30,np.nan,33,35]})\n",
        "\n",
        "# print the data with missing values\n",
        "print(\"------------------------------\")\n",
        "print(f\"Here is the data with Missing Values:\\n {data}\")\n",
        "\n",
        "# Calculate the Mean\n",
        "mean=data[\"age\"].mean()\n",
        "\n",
        "# replace the missing values with mean\n",
        "data[\"age\"]=data[\"age\"].fillna(mean)\n",
        "\n",
        "# now print the data without missing values\n",
        "print(\"------------------------------------\")\n",
        "print(f\"Here is the data without missing values:\\n {data}\")\n"
      ],
      "metadata": {
        "id": "n0bPz_qsa2Zn",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e9e99f84-a7a7-43a6-bb8d-f0a19a7049a3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "------------------------------\n",
            "Here is the data with Missing Values:\n",
            "      age\n",
            "0   10.0\n",
            "1   12.0\n",
            "2   14.0\n",
            "3   13.0\n",
            "4   15.0\n",
            "5   14.0\n",
            "6   19.0\n",
            "7   18.0\n",
            "8   20.0\n",
            "9   25.0\n",
            "10  28.0\n",
            "11   NaN\n",
            "12  29.0\n",
            "13  30.0\n",
            "14   NaN\n",
            "15  33.0\n",
            "16  35.0\n",
            "------------------------------------\n",
            "Here is the data without missing values:\n",
            "      age\n",
            "0   10.0\n",
            "1   12.0\n",
            "2   14.0\n",
            "3   13.0\n",
            "4   15.0\n",
            "5   14.0\n",
            "6   19.0\n",
            "7   18.0\n",
            "8   20.0\n",
            "9   25.0\n",
            "10  28.0\n",
            "11  21.0\n",
            "12  29.0\n",
            "13  30.0\n",
            "14  21.0\n",
            "15  33.0\n",
            "16  35.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**NOW WE HANDLE MISSING VALUES WITH (MEDIAN)**"
      ],
      "metadata": {
        "id": "-t-jFu_gMzUM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# Dummy data set:\n",
        "data=pd.DataFrame({\"age\" : [10,12,14,13,15,14,19,18,20,25,28,np.nan,29,30,np.nan,33,35]})\n",
        "\n",
        "# print the data with missing values:\n",
        "print(\"------------------------------\")\n",
        "print(f\"Here is the data with Missing Values:\\n {data}\")\n",
        "\n",
        "# Calculate the medean\n",
        "median=data[\"age\"].median()\n",
        "\n",
        "# replace the missing values with median\n",
        "data[\"age\"]=data[\"age\"].fillna(median)\n",
        "\n",
        "# now print the data without missing values:\n",
        "print(\"------------------------------------\")\n",
        "print(f\"Here is the data without missing values:\\n {data}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f5cpf-AcM_I2",
        "outputId": "42aa2151-75b9-4bf5-9ad0-1179961b667a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "------------------------------\n",
            "Here is the data with Missing Values:\n",
            "      age\n",
            "0   10.0\n",
            "1   12.0\n",
            "2   14.0\n",
            "3   13.0\n",
            "4   15.0\n",
            "5   14.0\n",
            "6   19.0\n",
            "7   18.0\n",
            "8   20.0\n",
            "9   25.0\n",
            "10  28.0\n",
            "11   NaN\n",
            "12  29.0\n",
            "13  30.0\n",
            "14   NaN\n",
            "15  33.0\n",
            "16  35.0\n",
            "------------------------------------\n",
            "Here is the data without missing values:\n",
            "      age\n",
            "0   10.0\n",
            "1   12.0\n",
            "2   14.0\n",
            "3   13.0\n",
            "4   15.0\n",
            "5   14.0\n",
            "6   19.0\n",
            "7   18.0\n",
            "8   20.0\n",
            "9   25.0\n",
            "10  28.0\n",
            "11  19.0\n",
            "12  29.0\n",
            "13  30.0\n",
            "14  19.0\n",
            "15  33.0\n",
            "16  35.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**NOW WE HANDLE MISSING VALUES WITH (MODE)**"
      ],
      "metadata": {
        "id": "1OUF0IPwRif-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# import libraries:\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# dummy data set:\n",
        "data=pd.DataFrame({\"fruits\" : [\"Apple\", \"Banana\", \"Orange\", \"Mango\",np.nan, \"Pineapple\", \"Grapes\",np.nan, \"Strawberry\",\"Apple\"]})\n",
        "\n",
        "# print the data with missing values:\n",
        "print(\"----------------------------\")\n",
        "print(f\"Here is the data with missing values: \\n {data}\")\n",
        "\n",
        "#calculate mode:\n",
        "mode=data[\"fruits\"].mode()[0]\n",
        "\n",
        "#replace the missing values with mode:\n",
        "data[\"fruits\"]=data[\"fruits\"].fillna(mode)\n",
        "\n",
        "#now print the data without missing values:\n",
        "print(\"-----------------------------------\")\n",
        "print(f\"Here is the data without missing values: \\n {data}\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NGU3_kPbRrT_",
        "outputId": "4579a2ae-d910-4f81-deaa-fa49a7eca39f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "----------------------------\n",
            "Here is the data with missing values: \n",
            "        fruits\n",
            "0       Apple\n",
            "1      Banana\n",
            "2      Orange\n",
            "3       Mango\n",
            "4         NaN\n",
            "5   Pineapple\n",
            "6      Grapes\n",
            "7         NaN\n",
            "8  Strawberry\n",
            "9       Apple\n",
            "-----------------------------------\n",
            "Here is the data without missing values: \n",
            "        fruits\n",
            "0       Apple\n",
            "1      Banana\n",
            "2      Orange\n",
            "3       Mango\n",
            "4       Apple\n",
            "5   Pineapple\n",
            "6      Grapes\n",
            "7       Apple\n",
            "8  Strawberry\n",
            "9       Apple\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "***CHECK THE MISSING VALUES IN TITANIC DATA:***"
      ],
      "metadata": {
        "id": "mgplm293Qvqd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "\n",
        "df = sns.load_dataset(\"titanic\")\n",
        "df.isnull().sum().sort_values(ascending=False)"
      ],
      "metadata": {
        "id": "NmhBRbYxv9ch",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 554
        },
        "outputId": "efa0a2de-1d20-41dc-a362-c5200c8adda3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "deck           688\n",
              "age            177\n",
              "embarked         2\n",
              "embark_town      2\n",
              "sex              0\n",
              "pclass           0\n",
              "survived         0\n",
              "fare             0\n",
              "parch            0\n",
              "sibsp            0\n",
              "class            0\n",
              "adult_male       0\n",
              "who              0\n",
              "alive            0\n",
              "alone            0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>deck</th>\n",
              "      <td>688</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>age</th>\n",
              "      <td>177</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>embarked</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>embark_town</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>sex</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pclass</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>survived</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>fare</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>parch</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>sibsp</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>class</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>adult_male</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>who</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>alive</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>alone</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# SECTION # 3: Handling Missing Values (KNN & Iterative Imputer)"
      ],
      "metadata": {
        "id": "ySYUW7emVeKO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "***HANDLE MISSING VALUES WITH KNN IMPUTER (USE FOR ONE BY ONE COLUMN)***"
      ],
      "metadata": {
        "id": "Slu6sFuGy7eX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.impute import KNNImputer\n",
        "\n",
        "imputer= KNNImputer(n_neighbors=4)\n",
        "\n",
        "df[\"age\"] = imputer.fit_transform(df[[\"age\"]])\n",
        "\n",
        "df.isnull().sum().sort_values(ascending=False)"
      ],
      "metadata": {
        "id": "oc_oWIOTyz4V",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 554
        },
        "outputId": "9ae108f6-110c-48b4-b718-a2849561ced4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "deck           688\n",
              "embarked         2\n",
              "embark_town      2\n",
              "age              0\n",
              "survived         0\n",
              "pclass           0\n",
              "sex              0\n",
              "fare             0\n",
              "parch            0\n",
              "sibsp            0\n",
              "class            0\n",
              "adult_male       0\n",
              "who              0\n",
              "alive            0\n",
              "alone            0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>deck</th>\n",
              "      <td>688</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>embarked</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>embark_town</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>age</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>survived</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pclass</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>sex</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>fare</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>parch</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>sibsp</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>class</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>adult_male</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>who</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>alive</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>alone</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**LABEL ENCODING (CONVERT CATEGORICAL TO NUMBER)**"
      ],
      "metadata": {
        "id": "b7uR6XE_BDMd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "# columns to encode:\n",
        "columns_to_encode = [\"sex\",\"embarked\",\"who\",\"deck\",\"class\",\"embark_town\",\"alive\"]\n",
        "\n",
        "#Dictionary to store labelencoders for each column\n",
        "label_encoders = {}\n",
        "\n",
        "#loop to apply labelencoder to each colum for encoding\n",
        "for col in columns_to_encode:\n",
        "\n",
        "\n",
        "    # fit and transform the data:\n",
        "    df[col] = LabelEncoder().fit_transform(df[col])\n",
        "    # store the encoder in the dictionary\n",
        "    label_encoders[col] = LabelEncoder()\n",
        "df.head"
      ],
      "metadata": {
        "id": "dHrNLvdZBINw",
        "outputId": "4b2dda77-d5a6-4255-cb9c-f6a651bf5ae5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 186
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<bound method NDFrame.head of      survived  pclass  sex        age  sibsp  parch     fare  embarked  class  \\\n",
              "0           0       3    1  22.000000      1      0   7.2500         2      2   \n",
              "1           1       1    0  38.000000      1      0  71.2833         0      0   \n",
              "2           1       3    0  26.000000      0      0   7.9250         2      2   \n",
              "3           1       1    0  35.000000      1      0  53.1000         2      0   \n",
              "4           0       3    1  35.000000      0      0   8.0500         2      2   \n",
              "..        ...     ...  ...        ...    ...    ...      ...       ...    ...   \n",
              "886         0       2    1  27.000000      0      0  13.0000         2      1   \n",
              "887         1       1    0  19.000000      0      0  30.0000         2      0   \n",
              "888         0       3    0  29.699118      1      2  23.4500         2      2   \n",
              "889         1       1    1  26.000000      0      0  30.0000         0      0   \n",
              "890         0       3    1  32.000000      0      0   7.7500         1      2   \n",
              "\n",
              "     who  adult_male  deck  embark_town  alive  alone  \n",
              "0      1        True     7            2      0  False  \n",
              "1      2       False     2            0      1  False  \n",
              "2      2       False     7            2      1   True  \n",
              "3      2       False     2            2      1  False  \n",
              "4      1        True     7            2      0   True  \n",
              "..   ...         ...   ...          ...    ...    ...  \n",
              "886    1        True     7            2      0   True  \n",
              "887    2       False     1            2      1   True  \n",
              "888    2       False     7            2      0  False  \n",
              "889    1        True     2            0      1   True  \n",
              "890    1        True     7            1      0   True  \n",
              "\n",
              "[891 rows x 15 columns]>"
            ],
            "text/html": [
              "<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n",
              "      pre.function-repr-contents {\n",
              "        overflow-x: auto;\n",
              "        padding: 8px 12px;\n",
              "        max-height: 500px;\n",
              "      }\n",
              "\n",
              "      pre.function-repr-contents.function-repr-contents-collapsed {\n",
              "        cursor: pointer;\n",
              "        max-height: 100px;\n",
              "      }\n",
              "    </style>\n",
              "    <pre style=\"white-space: initial; background:\n",
              "         var(--colab-secondary-surface-color); padding: 8px 12px;\n",
              "         border-bottom: 1px solid var(--colab-border-color);\"><b>pandas.core.generic.NDFrame.head</b><br/>def head(n: int=5) -&gt; Self</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.12/dist-packages/pandas/core/generic.py</a>Return the first `n` rows.\n",
              "\n",
              "This function returns the first `n` rows for the object based\n",
              "on position. It is useful for quickly testing if your object\n",
              "has the right type of data in it.\n",
              "\n",
              "For negative values of `n`, this function returns all rows except\n",
              "the last `|n|` rows, equivalent to ``df[:n]``.\n",
              "\n",
              "If n is larger than the number of rows, this function returns all rows.\n",
              "\n",
              "Parameters\n",
              "----------\n",
              "n : int, default 5\n",
              "    Number of rows to select.\n",
              "\n",
              "Returns\n",
              "-------\n",
              "same type as caller\n",
              "    The first `n` rows of the caller object.\n",
              "\n",
              "See Also\n",
              "--------\n",
              "DataFrame.tail: Returns the last `n` rows.\n",
              "\n",
              "Examples\n",
              "--------\n",
              "&gt;&gt;&gt; df = pd.DataFrame({&#x27;animal&#x27;: [&#x27;alligator&#x27;, &#x27;bee&#x27;, &#x27;falcon&#x27;, &#x27;lion&#x27;,\n",
              "...                    &#x27;monkey&#x27;, &#x27;parrot&#x27;, &#x27;shark&#x27;, &#x27;whale&#x27;, &#x27;zebra&#x27;]})\n",
              "&gt;&gt;&gt; df\n",
              "      animal\n",
              "0  alligator\n",
              "1        bee\n",
              "2     falcon\n",
              "3       lion\n",
              "4     monkey\n",
              "5     parrot\n",
              "6      shark\n",
              "7      whale\n",
              "8      zebra\n",
              "\n",
              "Viewing the first 5 lines\n",
              "\n",
              "&gt;&gt;&gt; df.head()\n",
              "      animal\n",
              "0  alligator\n",
              "1        bee\n",
              "2     falcon\n",
              "3       lion\n",
              "4     monkey\n",
              "\n",
              "Viewing the first `n` lines (three in this case)\n",
              "\n",
              "&gt;&gt;&gt; df.head(3)\n",
              "      animal\n",
              "0  alligator\n",
              "1        bee\n",
              "2     falcon\n",
              "\n",
              "For negative values of `n`\n",
              "\n",
              "&gt;&gt;&gt; df.head(-3)\n",
              "      animal\n",
              "0  alligator\n",
              "1        bee\n",
              "2     falcon\n",
              "3       lion\n",
              "4     monkey\n",
              "5     parrot</pre>\n",
              "      <script>\n",
              "      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n",
              "        for (const element of document.querySelectorAll('.filepath')) {\n",
              "          element.style.display = 'block'\n",
              "          element.onclick = (event) => {\n",
              "            event.preventDefault();\n",
              "            event.stopPropagation();\n",
              "            google.colab.files.view(element.textContent, 5818);\n",
              "          };\n",
              "        }\n",
              "      }\n",
              "      for (const element of document.querySelectorAll('.function-repr-contents')) {\n",
              "        element.onclick = (event) => {\n",
              "          event.preventDefault();\n",
              "          event.stopPropagation();\n",
              "          element.classList.toggle('function-repr-contents-collapsed');\n",
              "        };\n",
              "      }\n",
              "      </script>\n",
              "      </div>"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**HANDLE MISSING VALUES WITH ITERATIVE IMPUTER:**"
      ],
      "metadata": {
        "id": "CxsbaARiOFsI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.experimental import enable_iterative_imputer\n",
        "from sklearn.impute import IterativeImputer\n",
        "\n",
        "imputer = IterativeImputer(max_iter=10)\n",
        "\n",
        "#columns to impute\n",
        "columns_to_impute=[\"age\",\"pclass\",\"deck\"]\n",
        "\n",
        "# loop to impute each colum\n",
        "\n",
        "for col in columns_to_impute:\n",
        "    df[columns_to_impute] = imputer.fit_transform(df[columns_to_impute])\n",
        "\n",
        "\n",
        "# check the missing values\n",
        "df.isnull().sum().sort_values(ascending=False)\n"
      ],
      "metadata": {
        "id": "l55ZKxN1OX-S",
        "outputId": "0e1722dd-4924-43cd-f484-1a408f8524b9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 554
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "survived       0\n",
              "pclass         0\n",
              "sex            0\n",
              "age            0\n",
              "sibsp          0\n",
              "parch          0\n",
              "fare           0\n",
              "embarked       0\n",
              "class          0\n",
              "who            0\n",
              "adult_male     0\n",
              "deck           0\n",
              "embark_town    0\n",
              "alive          0\n",
              "alone          0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>survived</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pclass</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>sex</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>age</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>sibsp</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>parch</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>fare</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>embarked</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>class</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>who</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>adult_male</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>deck</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>embark_town</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>alive</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>alone</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Handle Missing Values – Data Cleaning Project**\n",
        "\n",
        "**Overview:**\n",
        "\n",
        "In this project, I explored different techniques to handle missing values in a dataset. This is my first data analysis project, completed in Google Colab and shared on GitHub as part of my learning journey.\n",
        "\n",
        "**Objectives:**\n",
        "\n",
        "Visualize data distribution and detect outliers (Histogram, Boxplot, Scatter Plot, Heatmap)\n",
        "\n",
        "Handle missing values using:\n",
        "\n",
        "Mean, Median, Mode\n",
        "\n",
        "KNN Imputer\n",
        "\n",
        "Iterative Imputer\n",
        "\n",
        "Apply Label Encoding for categorical columns\n",
        "\n",
        "**Visualizations:**\n",
        "\n",
        "Histogram → to check data distribution\n",
        "\n",
        "Boxplot → to detect outliers\n",
        "\n",
        "Scatter Plot → to understand relationships between variables\n",
        "\n",
        "Heatmap → to check correlations\n",
        "\n",
        "**Techniques Used:**\n",
        "\n",
        "Simple Imputation – Mean, Median, Mode\n",
        "\n",
        "KNN Imputer – fills missing values based on similar rows\n",
        "\n",
        "Iterative Imputer – advanced, model-based imputation\n",
        "\n",
        "Encoding – converting categorical data into numeric format\n",
        "\n",
        "**Conclusion:**\n",
        "\n",
        "For small datasets, Mean/Median/Mode are simple and fast solutions.\n",
        "\n",
        "Median works better when outliers are present.\n",
        "\n",
        "For complex datasets, KNN and Iterative Imputer provide better results.\n",
        "\n",
        "Handling missing values is a fundamental step in data cleaning that directly improves machine learning model accuracy.\n",
        "\n",
        "**Files in this Repository:**\n",
        "\n",
        "Handle Missing Values.ipynb → Colab Notebook\n",
        "\n",
        "Handle Missing Values.pdf → Report (PDF format)\n",
        "\n",
        "**Author**\n",
        "\n",
        "Muhammad Umar"
      ],
      "metadata": {
        "id": "TLhJ4QWHLSHQ"
      }
    }
  ]
}